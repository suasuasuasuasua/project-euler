#!/usr/bin/env python
# coding: utf-8

# # Problem 2 - Even Fibonacci Numbers
#
# https://projecteuler.net/problem=2
#
# Each new term in the Fibonacci sequence is generated by adding the previous two
# terms. By starting with 1 and 2, the first 10 terms will be:
#
# $$
#     1,2,3,5,8,13,21,34,55,89
# $$
#
# By considering the terms in the Fibonacci sequence whose values do not exceed
# four million, find the sum of the even-valued terms.
#

# %% Make sure the fibonnaci sequence does not exceed four million
upper_limit = 4e6

# %% Naiive Fibonnaci Definition
from functools import lru_cache


@lru_cache(maxsize=None)
def fib(n: int) -> int:
    """The fibonnaci sequence is defined for non-negative integers.

    Define a cache so that we don't recompute value unnecessarily.

    Args:
        n (int): the nth number in the fibonnaci sequence.

    Returns:
        int: the fibonnaci number.
    """
    assert n >= 0

    if n in (0, 1):
        return 1
    else:
        return fib(n - 1) + fib(n - 2)


# %% Get Even Fibonnaci Numbers
nums = []

i = 0
while (val := fib(i)) < upper_limit:
    # Only track the even numbers in the fibonnaci sequence
    if val % 2 == 0:
        nums.append(val)

    i += 1

answer = sum(nums)


# %% Final Answer
print(f"The answer is {answer}")
